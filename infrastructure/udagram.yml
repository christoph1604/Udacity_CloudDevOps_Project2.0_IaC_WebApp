Description: CD12352 - Infrastructure as Code Project - Udagram

Parameters:

  projectName:
    Description: Name of the project
    Type: String
    Default: DefaultProject

  #as per requirement, the machines should have 10 GB or more of disk volume
  instanceVolumeSize:
    Description: Size of the volumes of the EC2 instances in GB
    Type: String
    Default: "10"

  #as it was explicitly requested in "Network and Servers Configuration" requirements, point 5: exactly 4 servers should be deployed; so setting MinSize/DesiredCapacity/MaxSize to 4 via parameters
  minSizeScalingGroup:
    Description: Minimum size of the autoscaling group
    Type: String
    Default: "1"

  maxSizeScalingGroup:
    Description: Maximum size of the autoscaling group
    Type: String
    Default: "4"

  desiredSizeScalingGroup:
    Description: Desired size of the autoscaling group
    Type: String
    Default: "4"

Resources:
  
  SecurityGroupPrivateSubnet:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Security group for the private subnets
      GroupName: SecurityGroupPrivateSubnet
      SecurityGroupEgress: 
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref SecurityGroupLoadBalancer
      VpcId: 
        Fn::ImportValue:
          !Sub "${projectName}-VPCID"

  SecurityGroupLoadBalancer:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Security group for the load balancer.
      GroupName: SecurityGroupLoadBalancer
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId:
        Fn::ImportValue:
          !Sub "${projectName}-VPCID"


  # We include a portion of the LaunchTemplate resource so you can use the UserData.
  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${projectName}-web-servers-launch-template"
      LaunchTemplateData:
        UserData:
          Fn::Base64: |
            #!/bin/bash
            apt-get update -y
            sudo apt-get install nginx -y
            service nginx start

            cat <<EOF > index.html
            "it works! Udagram, Udacity"
            EOF

            sudo cp index.html /var/www/html/index.html

            sudo systemctl reload nginx
      #AMI of Ubuntu Server 22.04 LTS (HVM), SSD Volume Type
        ImageId: ami-005fc0f236362e99f 
        SecurityGroupIds:
          - !Ref SecurityGroupPrivateSubnet
        InstanceType: t2.micro
        IamInstanceProfile:
          Name: !Ref WebServerInstanceProfile
        BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: !Ref instanceVolumeSize

  WebServerInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${projectName}-web-servers-instance-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: s3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - 's3:PutObject*'
                - 's3:GetObject*'
                - 's3:DeleteObject*'
              Resource:
                - !GetAtt S3Bucket.Arn
      # added to enable Amazon SSM access for EC2 instances
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
      - !Ref WebServerInstanceRole

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub ${projectName}-PRIV-NETS
      LaunchTemplate:
        LaunchTemplateId: !Ref WebAppLaunchTemplate
        Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber
      # as it was explicitly requested in "Network and Servers Configuration" requirements, point 5: exactly 4 servers should be deployed; so setting MinSize/DesiredCapacity/MaxSize to 4 via parameters
      # as per documentation, instances will per default be distributed equally on the specifiec subnets
      MinSize: !Ref minSizeScalingGroup
      DesiredCapacity: !Ref desiredSizeScalingGroup
      MaxSize: !Ref maxSizeScalingGroup
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${projectName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${projectName}-PUB2-SN"
      SecurityGroups:
      - Ref: SecurityGroupLoadBalancer

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${projectName}-VPCID"

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP

  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${projectName}-838894772923"
      #Public read access needed to S3 bucket as per requirements; realized via additional BucketPolicy
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
  
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'

Outputs:

  LoadBalancerURL: 
    Description: Public URL of the load balancer
    # Additional requirement: Prefix should be added to DNS name of load balancer
    Value: 
      Fn::Join:
        - ""
        - - "http://"
          - !GetAtt WebAppLB.DNSName
    Export:
      Name: LoadBalancerURL

  S3BucketName:
    Description: Name of the S3 bucket used/created within the application
    Value: !Ref S3Bucket
    Export:
      Name: S3BucketName

  AutoScalingGroupName:
    Description: Name of the autoscaling group
    Value: !GetAtt WebAppGroup.AutoScalingGroupName